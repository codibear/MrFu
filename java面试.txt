前端框架
	miniui	ionic	vue.js	anlular.js	jqueryui	hui


1.connection的实现和关闭
===================================
<%@include%>是指令，是静态包含，在翻译期将把被包含的资源翻译到包含资源中，源代码合二为一。而<jsp:include/>是动作，是动态包含，在运行期动态访问被包含的资源，将生成的响应合二为一进行显示。

=====================================111
3.jsp是如何运行的
（1）JSP引擎先把该JSP文件转换成一个Java源文件（Servlet），在转换时如果发现JSP文件有任何语法错误，转换过程将中断，并向服务端和客户端输出出错信息。

（2）如果转换成功，JSP引擎用javac把该Java源文件编译成相应的class文件。

（3）创建一个该Servlet（JSP页面的转换结果）的实例，该Servlet的jspInit()方法被执行，jspInit()方法在Servlet的生命周期中只被执行一次。

（4）jspService()方法被调用来处理客户端的请求。对每一个请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行可以大大降低对系统的资源需求，提高系统的并发量及响应时间。但不过也应该注意多线程的编程限制，由于该Servlet始终驻于内存，所以响应是非常快的。

（5）如果.jsp文件被修改了，服务器将根据设置决定是否对该文件重新编译，如果需要重新编译，则将编译结果取代内存中的Servlet，并继续上述处理过程。

（6）虽然JSP效率很高，但在第一次调用时由于需要转换和编译而有一些轻微的延 迟。此外，在任何时候如果由于系统资源不足的原因，JSP引擎将以某种不确定的方式将Servlet从内存中移去。当这种情况发生时jspDestroy()方法首先被调用。

（7）然后Servlet实例便被标记加入“垃圾收集”处理。可在jspInit()中进行一些初始化工作，如建立与数据库的连接，或建立网络连接，从配置文件中取一些参数等，在jspDestory()中释放相应的资源

====================================
		什么事mvc以及mvc的实现
		
MVC是在java中的一种设计模式或者说是设计思想。通过该设计，可以降低代码间的耦合度。可以让代码层次更加清晰，便于程序的可扩展和可维护性。
在MVC中，M代表Model模型层,V代表View视图层,C代表控制层。
例如，在jsp中，使用jsp作为输出层，输出结果以及展示内容，而Servlet作为控制层进行数据获取、对象的封装以及执行上下层次跳转，而Model则由业务逻辑层、数据访问层及实体所代表。
而在框架应用上，Struts2中，可以使用jsp、Freemarker、xml等来作为视图层，Action作为控制层，可以通过例如Hibernate或者是Mybatis进行设置。



		Filter的原理及作用
		
Filter是一个过滤器。在web中，可以通过filter进行url的拦截处理，在该接口中，定义了init()初始化、doFiter()执行、destroy()销毁三个方法。一般filter作用在权限拦截上、日志记录、编码设置等功能上，对于被拦截方是不知晓当前的增强操作的，所以降低了代码中的耦合度，提高了可扩展性。
与之相似的，例如拦截器。拦截器不仅可以拦截url，还可以拦截类、方法、方法中的参数以及返回值等。作为过滤器，只能依赖于web容器，而拦截器实现使用的是代理设计模式，所以，不需要依赖于其他的第三方容器。
===================================
		J2ee 相关的知识
J2ee本身是一个标准，应用于企业分布式开发的标准平台；

j2ee也是一个框架，包括JDBC、EJB、JNDI、JMS、JTA 、RMI等技术。

名词解析：

JDBC： 是一种执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组由Java语言编写的类和接口组成，简单的说JDBC可做三件事情：与数据库建立连接、发
送SQL语句、处理结果。

EJB： 是一种服务器端组件体系结构，简化了JAVA开发企业级分布式组件应用程序的过程，EJB是J2ee的一部分，在J2ee里，EJB称为JAVA企业bean，是java的核心代码，

分别是会话（session） bean，实体（entity）bean，消息驱动（MessageDriver）bean。简单点说，就是别人已经写好了一些javabean，你只需要去学习如何应用现成的框
架去更快更快捷的开发。

JNDI：Java命名服务目录，提供一个目录系统，让其他各地的应用程序在上面留下自己的索引，从而快速的定位和查询分布式应用系统。

JMS：（Java   Message  Server）Java消息服务，提供各个应用程序之间的通讯，包括点对点的广播。

JTA：(java Transaction Api) JAVA事务服务，提供各种分布式事务服务，用于程序只需调用现成的接口就行。

RMI：对象请求中介协议，应用于通过远程调用服务，例如，一台计算机上运行一个程序，它提供股票分析服务，我们可以在本地计算机上直接调用它的服务，当然，这要通过一定的规范才能实现在异构系统之间进行通讯，  RMI是Java特有的。

----------------------------------

HashMap  和 HashTable 的区别
Hashtable和HashMap类有三个重要的不同之处。第一个不同主要是历史原因。Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现。
　　
也许最重要的不同是Hashtable的方法是同步的，而HashMap的方法不是。这就意味着，虽然你可以不用采取任何特殊的行为就可以在一个多线程的应用程序中用一个Hashtable，但你必须同样地为一个HashMap提供外同步。一个方便的方法就是利用Collections类的静态的synchronizedMap()方法，它创建一个线程安全的Map对象，并把它作为一个封装的对象来返回。这个对象的方法可以让你同步访问潜在的HashMap。这么做的结果就是当你不需要同步时，你不能切断Hashtable中的同步（比如在一个单线程的应用程序中），而且同步增加了很多处理费用。
　　
　第三点不同是，只有HashMap可以让你将空值作为一个表的条目的key或value。HashMap中只有一条记录可以是一个空的key，但任意数量的条目可以是空的value。这就是说，如果在表中没有发现搜索键，或者如果发现了搜索键，但它是一个空的值，那么get()将返回null。如果有必要，用containKey()方法来区别这两种情况。


-------------------------------------


 Connection connection = DataSource.getConnection();
        String sql = "select * from userinfo where user_name=? and user_pwd=?";
        PreparedStatement ps = connection.prepareStatement(sql);
        ps.setString(1,username);
        ps.setString(2,password);
        ResultSet rs = ps.executeQuery();
        UserInfo userInfo = null;
        if(rs.next()){
            userInfo = new UserInfo();
            userInfo.setUser_name(rs.getString("user_name"));
        }
        DataSource.closeConnection(connection);
        return userInfo;



------------------------------------

接口与类的区别：
	接口不能用于实例化对象。
	接口没有构造方法。
	接口中所有的方法必须是抽象方法。
	接口不能包含成员变量，除了 static 和 final 变量。
	接口不是被类继承了，而是要被类实现。
	接口支持多重继承。
接口特性
	接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。
	接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误。
	接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。
抽象类和接口的区别
	1. 抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。
	2. 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。
	3. 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。
	4. 一个类只能继承一个抽象类，而一个类却可以实现多个接口。


------------------------------------
    同一个类        同一个包        不同包的子类        不同包非子类
private     *
default     *            *
protected   *            *          *
public      *            *          *                 *
-----------------------------------------

21.   概述反射和序列化
Reflection 是Java被视为动态（或准动态）语言的一个关键性质。这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息，包括其modifiers（诸如public, static 等等）、superclass（例如Object）、实现之interfaces（例如Cloneable），也包括fields和methods的所有信息，并可于运行时改变fields内容或唤起methods。本文借由实例，大面积示范Reflection APIs。

22.   序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。
 序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FileOutputStream)来构造一个 ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Object obj)方法就可以将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流
 
 
 -----------------------------------------
			什么事servlet？以及servlet的生命周期
 Servlet是JAVAEE技术平台中的一种技术。Servlet本身是一个接口。该接口拥有Init、Service、destory等常用方法。通常在自定义Servlet的时候，会继承HttpServlet，而在此类中定义了doPost、doGet等常用的方法，根据用户的请求方式，在自定义的Servlet中，可以重写doGet或者doPost方法，进行相应的处理。
在Servlet中，定义了Init、Service、destory三个方法。当url请求时，首先会执行Servlet中的init方法，进行初始化操作，可以读取web.xml文件中的初始化参数内容。如果用户使用url请求，则会找到自定义Servlet中的doGet或doPost请求，假如在自定义的Servlet中，包含了service方法，则会调用service方法，如果不存在，就根据对应请求执行对应的方法，Servlet自身是一个单实例支持多线程操作的对象，所以可能存在县城安全性问题，当Servlet容器发生宕机或关闭的情况下，就会执行Servlet中的destory方法进行销毁操作。
public class LoginServlet extends HttpServlet{
	protected void doGet(HttpServletRequest req,HttpServletResponse resp) {

}

protected void doPost(HttpServletRequest req,HttpServletResponse resp) {

}

}

-----------------------------------------------
9、一个用户具有多个角色，请查询出该表中具有该用户的所有角色的其他用户。
select count(*) as num,tb.id 
from 
 tb,
 (select role from tb where id=xxx) as t1
where
 tb.role = t1.role and tb.id != t1.id
group by tb.id 
having 
	num = select count(role) from tb where id=xxx;

-----------------------------------------------
	
JSP中动态INCLUDE与静态INCLUDE的区别？
动态include:通过jsp的指令使用<jsp:include page=”目标页面”/>
先进行计算，然后再进行页面的包含。
静态include：通过页面指令<%@ include=”目标页面”%>
先包含页面，然后再进行计算。
a.jsp
<%
	Int num = 10 ;
	out.println(num);
%>
b.jsp
<%@ include=”a.jsp”%>
<%
	int num = 5 ;   //此时当页面运行时，就会抛出异常。
%>

动态包含：
	此时能够正常运行。。。
	
------------------------------------------------
2.  什么是可变参数？用简单代码展示可变参数的使用。
解析：如果一个类中的某个方法，要接受某个类型的参数，而参数个数却不确定，这种情况下，可以将这个参数使用数组类型或者集合类型封装，然而使用该方法时就比较麻烦，必须先把参数先封装成数组或者集合。可变参数就能够解决这个问题。
参考答案：可变参数是指参数个数不确定的参数，如下所示：
public static int add(int..args){
    …………	
}
上述方法的args就是可变参数，使用add方法时，形式参数可以是任意多个int型数值。

---------------------------------------------------
3.  什么是泛型？泛型有什么作用？
解析：泛型是JDK5中增加的特性，API中有大量的泛型接口、泛型类及泛型方法等。程序员需要了解泛型的作用，尤其在使用集合框架时，往往需要使用到泛型。
参考答案：泛型的本质就是参数化类型，也就是说把数据类型指定为一个参数。在需要声明数据类型的地方，就可以不指定具体的某个类型，而是使用这个参数。这样一来，就能够在具体使用时再指定具体类型，实现了参数的“任意化”。泛型的好处是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。

----------------------------------------------------
			什么叫做多态函数
多态函数就是参数的类型是某个父类类型，具体为这个参数赋值的不同以使用该父类的任意子类的对象。使用多态参数，可以使程序的扩展性更好，即使%%%%的子类方法不需要任何修改，就能接受子类类型进行处理。

-----------------------------------------------------
			依赖关系是一种瞬时关系
依赖关系是一种瞬时关系，A依赖B，指的是A的某个行为的参数是B的类型，也就是说，A要想实现这个行为，必须依赖B的实例，A关联B，是一种长久的关系。？的是B作为A的属性存在，只要实例化一个A的对象，就会为这个A的对象实例化一个B的对象，作为它的属性使用，可以在A中任何需要使用B的地方使用B。

-----------------------------------------------------

术语来讲的区别：
1.==是判断两个变量或实例是不是指向同一个内存空间    equals是判断两个变量或实例所指向的内存空间的值是不是相同 
2.==是指对内存地址进行比较    equals()是对字符串的内容进行比较
3.==指引用是否相同    equals()指的是值是否相同

作者：涂鸦
链接：https://www.zhihu.com/question/26872848/answer/34357265
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


=====================================================================
-----------------------IO面试题------------------------------------------------------------------------------
=====================================================================

java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？

答：字节流，字符流。

字节流继承于InputStream OutputStream，

字符流继承于Reader Writer。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。

-----------------------------------------------------

什么是java序列化，如何实现java序列化？

答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。

可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。

序列化是为了解决在对对象流进行读写操作时所引发的问题。

序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，

implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FileOutputStream)来构造

一个ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Object obj)方法就可以

将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。

-----------------------------------------------------

在Java中，输入输出的处理需要引入的包是java.io，

面向字节的输入输出类的基类是Inputstream和Outputstream。

面向字符的输入输出类的基类是Reader和Writer。

-----------------------------------------------------

使用处理流的优势有哪些？如何识别所使用的流是处理流还是节点流？

【答案】

【优势】对开发人员来说，使用处理流进行输入/输出操作更简单；使用处理流的执行效率更高。

【判别】

处理流的构造器的参数不是一个物理节点，而是已经存在的流。而节点流都是直接以物理IO及节点作为构造器参数的。

-----------------------------------------------------

填空：下列程序将从file1.dat文件中读取全部数据，然后写到file2.dat文件中。

importjava.io.File;

importjava.io.FileInputStream;

importjava.io.FileNotFoundException;

importjava.io.FileOutputStream;

importjava.io.IOException;

public class FileStreamInOut {

public static void main(String[] args){

try{

File inFile = new File("_________");

File outFile = new File("_________");

FileInputStream fis = new FileInputStream(_________);

FileOutputStream fos = new FileOutputStream(_________);

int c;

while((c = fis.read())!=-1){

fos.write(c);

}

_____.close();

_____.close();

}catch(FileNotFoundException e){

System.out.println("FileStreamsTest:"+e);

}catch(IOException e){

System.out.println("FileStreamTest"+e);

}

}

}

-----------------------------------------------------

Java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继

承，请指出它们分别是哪些类？

【答案】Java中按所操作的数据单元的不同，分为字节流和字符流。

字节流继承于InputStream和OutputStream类，字符流继承于Reader和Writer。

按流的流向的不同，分为输入流和输出流。

按流的角色来分，可分为节点流和处理流。缓冲流、转换流、对象流和打印流等都属于处理流，使得输入/输出更简单，执行效率更高。

------------------------------------------------------

什么是标准的I/O流？

在java语言中，用stdin表示键盘，用stdout表示监视器。他们均被封装在System类的类变量in 和out中，

对应于系统调用System.in和System.out。这样的两个流加上System.err统称为标准流，它们是在System类中声明的3个类变量：

public static InputStream in

publicstaticPrintStream out

public static PrintStream err

-----------------------------------------------------

选择

1.计算机处理的数据最终分解为▁▁的组合。

A 0

B 数据包

C 字母

D 1

2.计算机处理的最小数据单元称为▁▁。

A 位

B 字节

C 兆

D 文件

3.字母、数字和特殊符号称为▁▁。

A 位

B 字节

C 字符

D 文件

4.▁▁文件流类的 close 方法可用于关闭文件。

A FileOutputStream

B FileInputStream

C RandomAccessFile

D FileWrite

5.RandomAccessFile 类的▁▁方法可用于从指定流上读取整数。

A readInt

B readLine

C seek

D close

6.RandomAccessFile 类的▁▁方法可用于从指定流上读取字符串。

A readInt

B readLine

C seek

D close

7.RandomAccessFile 类的▁▁方法可用于设置文件定位指针在文件中的位置。

A readInt

B readLiIne

C seek

D close

8.在FilterOutputStream类的构造方法中，下面哪个类是合法：

A File

B InputStream

C OutputStream

D FileOutputStream

【答案】

1.难度：容易答案：AD 知识点：计算机最终能处理的数据只能为 0 和 1。

2.难度：容易答案：B 知识点：计算机处理的最小数据单元是字节。

3.难度：容易答案：C 知识点：字符的概念。

4.难度：适中答案： ABC 知识点：FileOutStream、FileInputStream、RandomAccessFile

文件流类的 close 方法可用于关闭文件。

5.难度：适中答案：A 知识点：readInt方法的使用。

6.难度：适中答案：B 知识点：readLIne方法的使用。

7.难度：适中答案：C 知识点：seek 方法的使用。

8.难度：适中答案：C 知识点：在FilterOutputStream类中只有一种结构：public

FilterOutputStream(OutputStream)。

-----------------------------------------------------
2、List、Map、Set三个接口，存取元素时，各有什么特点？ 
这样的题属于随意发挥题：这样的题比较考水平，两个方面的水平：一是要真正明白这些内容，二是要有较强的总结和表述能力。如果你明白，但表述不清楚，在别人那里则等同于不明白。

首先，List与Set具有相似性，它们都是单列元素的集合，所以，它们有一个功共同的父接口，叫Collection。Set里面不允许有重复的元素，所谓重复，即不能有两个相等（注意，不是仅仅是相同）的对象 ，即假设Set集合中有了一个A对象，现在我要向Set集合再存入一个B对象，但B对象与A对象equals相等，则B对象存储不进去，所以，Set集合的add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true，当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。Set取元素时，没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。
	List表示有先后顺序的集合， 注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(Obj e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用add(int index,Obj e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进List中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个索引指向了这个对象，如图x所示。List除了可以以Iterator接口取得所有的元素，再逐一遍历各个元素之外，还可以调用get(index i)来明确说明取第几个。
	Map与List和Set不同，它是双列的集合，其中有put方法，定义如下：put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。取则可以根据key获得相应的value，即get(Object key)返回值为key 所对应的value。另外，也可以获得所有的key的结合，还可以获得所有的value的结合，还可以获得key和value组合成的Map.Entry对象的集合。

List 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。


HashSet按照hashcode值的某种运算方式进行存储，而不是直接按hashCode值的大小进行存储。例如，"abc" ---> 78，"def" ---> 62，"xyz" ---> 65在hashSet中的存储顺序不是62,65,78，这些问题感谢以前一个叫崔健的学员提出，最后通过查看源代码给他解释清楚，看本次培训学员当中有多少能看懂源码。LinkedHashSet按插入的顺序存储，那被存储对象的hashcode方法还有什么作用呢？学员想想!hashset集合比较两个对象是否相等，首先看hashcode方法是否相等，然后看equals方法是否相等。new 两个Student插入到HashSet中，看HashSet的size，实现hashcode和equals方法后再看size。

同一个对象可以在Vector中加入多次。往集合里面加元素，相当于集合里用一根绳子连接到了目标对象。往HashSet中却加不了多次的。 

3.序列化

我们有时候将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输，但是，jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java 帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的。 


例如，在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输或通过rmi等远程调用，这就需要在网络上传输对象，被传输的对象就必须实现Serializable接口。

5、 Java中堆和栈有什么不同？
为什么把这个问题归类在多线程和并发面试题里？因为栈是一块和线程紧密相关的内存区域。每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈 调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己 的栈，如果多个线程使用该变量就可能引发问题，这时volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。
-----------------------------------------------------

-----------------------------------------------------