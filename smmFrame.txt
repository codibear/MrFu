1.导入依赖
	
	 <!--jstl-->
    <!-- https://mvnrepository.com/artifact/jstl/jstl -->
    <dependency>
      <groupId>jstl</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/taglibs/standard -->
    <dependency>
      <groupId>taglibs</groupId>
      <artifactId>standard</artifactId>
      <version>1.1.2</version>
    </dependency>



    <!--mybatis模块-->
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.4.4</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>1.3.1</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.6</version>
    </dependency>



    <!--spring 模块-->
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.3.9.RELEASE</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>4.3.9.RELEASE</version>
    </dependency>



    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
	
	
	
2.web.xml 配置springmvc核心 DispatcherServlet(要换头文件信息)[内部有]

	<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

	<display-name>Archetype Created Web Application</display-name>
	  
	  -----------------------------------------------------
					spring和springmvc整合
					
	  <!--加载spring的核心配置文件-->
	  <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	  </context-param>

	  <!--监听上下文-->
	  <listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	  </listener>

	  <!--字符编码设置-->
	  <filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
		  <param-name>encoding</param-name>
		  <param-value>UTF-8</param-value>
		</init-param>
	  </filter>

	  <filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	  </filter-mapping>
	  
	  --------------------------------------------------
	  
	  <!--springmvc配置-->
	  <servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--查找配置文件-->
		<init-param>
		  <param-name>contextConfigLocation</param-name>
		  <param-value>classpath:springmvc.xml</param-value>
		</init-param>
	  </servlet>
	  <servlet-mapping>
      <servlet-name>springmvc</servlet-name>
      <url-pattern>*.do</url-pattern>
    </servlet-mapping>
	</web-app>
	
	<!--欢迎界面-->
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	
3.配置springmvc核心配置文件springmvc.xml

	<!--
        Spring3.0以后的版本中，加强了对于程序的控制，简化了大量的操作。
        基本上全部都实现了Annotation注解形式
    -->

<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
    
	
	<!--这一句很有用，用来注入用 -->  
    <context:component-scan base-package="com.zzx.ssm"/>
    <mvc:annotation-driven/>

	<!--  这两句相当于上面的那句mvc
	
	<!--注解映射器 -->  
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>  
    <!--注解适配器 -->  
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>  
	
	-->
	
	
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--prefix-->
        <property name="prefix" value="/jsp"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
</beans>

4.创建数据库连接配置文件db.properties
	jdbc.driver=com.mysql.jdbc.Driver
	jdbc.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8
	jdbc.username=root
	jdbc.password=root
	
5.配置log4j  log4j.properties
	log4j.rootLogger=DEBUG,TEST

	log4j.appender.TEST=org.apache.log4j.ConsoleAppender   
	log4j.appender.TEST.layout=org.apache.log4j.PatternLayout   
	log4j.appender.TEST.layout.ConversionPattern=[%d] [%p] [%l] [%m] %n  
	
6.配置mybatis核心配置文件 SqlMapConfig.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE configuration
			PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
		<!-- 设置别名 -->
		<typeAliases>
			<!-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 -->
			<package name="com.zzx.ssm.domain" />
		</typeAliases>

	</configuration>
	
7.配置spring核心配置文件[spring和mybatis整合]  applicationContext.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		   xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
		   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
		   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

		
					spring和mybatis整合
		---------------------------------------------------

		<context:property-placeholder location="classpath:db.properties"/>

		<!-- 数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			  destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<property name="maxActive" value="10"/>
			<property name="maxIdle" value="5"/>
		</bean>

		<!-- Mybatis的工厂 -->
		<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"/>
			<!-- 核心配置文件的位置 -->
			<property name="configLocation" value="classpath:SqlConfig.xml"/>
		</bean>


		<!-- Mapper动态代理开发   扫描 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 基本包 -->
			<property name="basePackage" value="com.zzx.ssm.dao"/>
		</bean>

		----------------------------------------------------
		
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>

		<tx:annotation-driven transaction-manager="transactionManager" />

	</beans>
	

8.创建实体类 (生成相应的getter setter)
	public class UserInfo implements Serializable {
    private Integer userId;
    private String username;
    private String password;
    private Date borndate;
	....
	}

9.创建实体类的映射文件(注意文件要和dao中的类同包,而且要不一层一层的建，要么就com/zzx/ssm/dao)
	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE mapper
			PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.chinasofti.mss.dao.UserInfoDao">
		<select id="findAll" resultType="userInfo">
			select * from userinfo
		</select>
	</mapper>
	
10.将方法写进dao中
11.建立结构
	dao
		类上面@Repository
	biz
		类上面@Service(写在实现类中)
		内部
			@AutoWired
			private UserDao userDao;
	controller
		类上面@Controller
		内部
			@AutoWired
			private UserBiz userBiz;
		方法前:
			 @RequestMapping("/user/list.do")
			 public String save(){
			 
			 }

========================================
			重点Controller的编写
========================================			 
	@Controller
	public class UserController {

		@Autowired
		private UserInfoBiz userInfoBiz;

		/*@RequestMapping("/user/save.do")
		public void save(){

		}*/

		@RequestMapping("/user/list.do")
		public ModelAndView list(){
			List<UserInfo> userInfos = userInfoBiz.findAll();

			ModelAndView mav = new ModelAndView();
			mav.addObject("userInfos",userInfos);
			mav.setViewName("/list");
			return mav;
		}


	}

	
===============================================

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%--
  Created by IntelliJ IDEA.
  User: Administrator
  Date: 2017/8/24 0024
  Time: 10:21
  To change this template use File | Settings | File Templates.
--%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
    <script type="text/javascript" src="${pageContext.request.contextPath}/js/jquery.min.js"></script>
    <script type="text/javascript">
        $(function(){
            $(".edit").click(function() {
                var userId = $(this).parent().parent().children().html() ;
                alert(userId);
                location.href="${pageContext.request.contextPath}/user/findbyid.do?userId="+userId ;
            }) ;
        }) ;
    </script>
</head>
<body>
    <table cellpadding="1" cellspacing="1" border="1">
        <c:forEach items="${userInfos}" var="userInfo" begin="0" step="1" varStatus="index">
            <tr>
                <td>${index.index + 1}</td>
                <td>
                        ${userInfo.username}
                </td>
                <td>
                        <fmt:formatDate value="${userInfo.borndate}" pattern="yyyy-MM-dd" />
                </td>
                <td>
                        ${userInfo.gender}
                </td>
                <td>
                    <input type="button" value="编辑" class="edit" />
                    <input type="button" value="查看详情" />
                    <input type="button" value="删除" />
                </td>
            </tr>
        </c:forEach>
    </table>

</body>
</html>
=======================================================
		

