intellij  -----  struts2

蚂蚁算法  python 线性代数

1.配置（low方法）
	导入案例的lib包，	
	在web.xml中配置filter（根据案例）
		<filter>
			<filter-name>struts2</filter-name>
			<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>struts2</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
=====================================================================	
	struts.xml中配置相关内容（删除相关内容）
	
		<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE struts PUBLIC
			"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
			"http://struts.apache.org/dtds/struts-2.3.dtd">

		<struts>
			<!--将不同的模块放置在不同的　包之中-->
			<package name="userinfopkg" namespace="/userinfo" extends="struts-default">
				<!--http://localhost:8080/struts/userinfo/loginAction-->
				<action name="listAction" class="com.chinasofti.action.UserInfoAction" method="list">
					<result name="list">/list.jsp</result>
				</action>
				<action name="loginAction" class="com.chinasofti.action.UserInfoAction" method="login">
					<!--
						重定向or后端跳转？
						默认的情况下采用后端跳转方式执行
					-->
					<result name="success">/index.jsp</result>
				</action>
			</package>
			<!--http://localhost:8080/struts/person/personAction-->
			<!--<package name="default" extends="struts-default" namespace="/person">
				<action name="PersonAction" class="com.chinasofti.action.PersonAction">
					<result name="list">/index.jsp</result>
				</action>
			</package>-->
		</struts>
		】】】------------------------------------------------
		
		struts.xml的配置
	<package name="default" namespace="/person" extends="struts-default">  //---随意的包名保证不冲突，  访问路径  默认继承
        <action name="loginAction" class="com.zzx.struts.action.PersonAction" >  //--action名随意起  调用的Action路径
            <result name="success">/index.jsp</result>   //访问成功后所跳转的界面
        </action>
    </package>
	
============================================================================		
		创建domain用来接收界面上传来的数据，要与form表单的name相同
		创建Action
			1.实现Action借口：xwork2包（在execute中写执行的内容）
			2.自己编写
				注意在接受表单的时候可以写get set方法
				注意方法的返回值类型只能是String类型				
public class UserInfo {
    private Integer userId;
    private String usserName;
    private String password;

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getUsserName() {
        return usserName;
    }

    public void setUsserName(String usserName) {
        this.usserName = usserName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

=============================================================
				初识 Maven

	配置：
	1.下载maven
	2.配置环境变量，（要在cmd中写一下mvn验证）把conf/setting.xml的miorro修改为国内的镜像
	3.创建项目，左侧选maven如果没有到setting中的plugin配置中勾上maven的选项
	4.选择maven。。。。。webapp的模板（注意不是coon的webapp）
	5.设置setting为自己刚才编写写的setting路径，创建完成后注意要设置自动导入
	6.在src文件夹中创建java文件夹并把它添加成source文件夹，在resource中创建XML Struts配置文件
	命名为struts.xml
	7.在添加maven  pom文件中添加以来
	 <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-core</artifactId>
      <version>2.3.33</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
	
	8.为maven配置filter（重要，必须做）
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>*.action</url-pattern>
  </filter-mapping>
  
  -------------------------------------------------------------
  
  
  ActionContext.getContext()这个相当于request
  <%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %>
  isELIgnored="false" 
	
	
	---------------------------------------------------------------------
	ModelDriven<T>   getModel()方法用来创建实体用于接收界面表单的对象，所以对象的创建
	要和表单的字段一样，这是因为struts实现的是BeanUtil，并且封装了MVN
	
	用来取值
	public class PersonAction implements ModelDriven<Person> {
    private Person person;

    public String login(){
        ///ServletActionContext.getRequest()  ----获得request的方法
        ActionContext.getContext().put("person",person);
        //ActionContext.getContext().getSession().put("")
        System.out.println(person);
        return "success";
    }

    public Person getModel() {//用于初始化
        if(person==null){
        person = new Person();
        }
        return person;
    }
}

	MavenDrive<T> 
	
	
	怎样把值放入值栈？
	---------------------------------------------------
	
	maven的依赖库
	<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>   compile  provided  
    </dependency>
	
	-------------------------------------------------
	
	AciotnSupport    里面实现了 execute方法，返回success经常用来验证
	
	
						配置
===================================================================================
	
FileUpload   struts2里面没有severlet的相关内容所以引入servlet包

public class FileUploadAction {
    private String fileName;
    private File file;
    private String fileFileName;
    private String fileContentType;
    // fileName：aaa 自己表单上给的文件名
    // file：upload_b1ca6ead_93a0_4efb_81b2_658607779bb2_00000001.tmpfile  临时缓存文件名
    // FileName:18f66ed05b4dec7a6e4b75c58417a433-dawmbwj.jpg   上传时候的文件本来的文件名
    // fileConetentType:image/jpeg  上传文件的格式
    public String excute() throws  Exception{
        //选择路径 自动创建跟目录

        String path = ServletActionContext.getServletContext().getRealPath("/upload");



        //创建文件夹路径并且以这个文件名命名这个文件
        //再不进行读写操作的时候目录中先不会创建upload文件夹


        File filePath = new File(path);

        if(!filePath.exists()){
            filePath.mkdir();
        }


        //System.out.println(path);


         /*文间的名的高级利用
         1.获得ip地址：
          String addip = ServletActionContext.getRequest().getRemoteAddr();
          System.out.println(addip);

         2.应用日期来创建*/

         String uname = UUID.randomUUID().toString().replace("-","");
         System.out.println(uname);
         fileFileName = uname + fileFileName.substring(fileFileName.indexOf("."));
         System.out.println(fileFileName); // a2f5d04650df4102a38241e5e42892de.jpg


        //文件写入: 先读后写  读文件  写道路径并且写文件名

        InputStream is = new FileInputStream(file);
        OutputStream os = new FileOutputStream(new File(filePath,fileFileName));

        int num = is.read();
        System.out.println("num:"+num);
        while (num!=-1){
            os.write(num);
            num = is.read();
        }

        is.close();
        os.close();

        //System.out.println("fileName："+fileName+"file："+file.getName()+"fileFileName:"+fileFileName+"fileConetentType:"+fileContentType);
        return "success";
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public String getFileFileName() {
        return fileFileName;
    }

    public void setFileFileName(String fileFileName) {
        this.fileFileName = fileFileName;
    }

    public String getFileContentType() {
        return fileContentType;
    }

    public void setFileContentType(String fileContentType) {
        this.fileContentType = fileContentType;
    }
}


<form action="FileUploadAction.action" method="post" enctype="multipart/form-data">
    商品名称：<input type="text" name="fileName">
    <input type="file" name="file">
    <input type="submit" value="保存">
</form>

----------------------------------------------------
		多文件上传
		
public class FileUploadListAction {
    private String goodsName;
    private List<File> file;
    private List<String> fileFileName;
    private List<String> fileContentType;

    public String execute() throws  Exception{
        String path = ServletActionContext.getServletContext().getRealPath("/upload");
        File filePath = new File(path);
        System.out.println(goodsName);
        if(!filePath.exists()){
            filePath.mkdir();
        }

        for (int i=0;i<file.size();i++){

            String uName = UUID.randomUUID().toString().replace("-","");
            String newName = uName + fileFileName.get(i).substring(fileFileName.get(i).lastIndexOf("."));

            InputStream is = new FileInputStream(file.get(i));
            OutputStream os = new FileOutputStream(new File(filePath,newName));

            int num = is.read();
            while (num != -1){
                os.write(num);
                num = is.read();
            }
            os.close();
            is.close();
        }
        return "success";

    }

    public String getGoodsName() {
        return goodsName;
    }

    public void setGoodsName(String goodsName) {
        this.goodsName = goodsName;
    }

    public List<File> getFile() {
        return file;
    }

    public void setFile(List<File> file) {
        this.file = file;
    }

    public List<String> getFileFileName() {
        return fileFileName;
    }

    public void setFileFileName(List<String> fileFileName) {
        this.fileFileName = fileFileName;
    }

    public List<String> getFileContentType() {
        return fileContentType;
    }

    public void setFileContentType(List<String> fileContentType) {
        this.fileContentType = fileContentType;
    }
}
	
	
	