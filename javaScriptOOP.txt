 
=======================================================
 综述。
2.4  2.8
========================================================

===  和  == 的区别
==判断值是不是相同
===值+类型


5中基本数据类型  number  string  boolean undefine  null   
一种非基本类型 object 

typeof 可以作用在上面的再加上  function

八进制 0开头  0x开头16进制 

指数  2e+3  2000

Infinity  超出了js的处理范围     
Infinity - Infinity/-Infinity + Infinity   --> NaN not a number 

NaN  类型为number 操作失败就会返回NaN

字符串->其他类型  在末尾加一个+""
其他类型->字符串  数字直接操作即可  或者是*1后在操作  乘法可以直接操作 
	var s = '3'; s = s+2; typeof s;
	"string"
	var s = '3'; s = s*1+2; typeof s;
	"number"

惰性求值



数组
	var a = [1,2]  返回值类型为object 数组中可以放任何类型，包括数组本身
	删除操作	delete a[1]
	a[[1,2],[3,4]]	a[0][0]=1
	
	
if 检查变量是否存在	if(typeof somevar !== "undefine"){}
三木运算	var result = (a==1)?"":"";


for-in 相当于 foreach
	var a = [1,2,3,4]
	for(var i in a){  //i 默认自动是下标  a是数组
		
	}
	
-============================================================
			函数
	
function sum(a,b){
	var c = a+b;
	return c;
}
//传入的参数可以多但不可以少，多的时候也是正常执行的（抛弃后面的）
因为每一个函数内部都有一个argument数组

		预定义函数
		
parseInt()  转int 不成功返回NaN 第二个参数可以写转换的进制数('032',16)
parseFloat() 里面只要有字母就断
isNaN()	用来检测上面的两个函数是否调用成功
isFinite()	是否是Infinity或NaN
encodeURI()返回可用url“www.baidu.com”  --》www.baidu.com
decodeURI()饭编码
encodeURIComponent()返回一部分
decodeURIComponent()
eval() 将其中输入的字符串当作js代码来执行
>>eval('var ii = 2;')
>>ii
2(输出2);

var i = 123;
function test(){
	alert(a)
	var i = 2;
	alert(a)
}两次都是undefine;


		回调函数
function one(){return 1;}
function two(){return 2;}
function c(one,two){return one()+two();}
c(one,two)

===================================================

			对象  -- json
最好不要用引号做属性表示
		键不建议用'' “”引起来，但是那样可以避免冲突	
		值除了数字都要引用
		最后一个元素不用用","
var book{
	name:'wo',
	author:{
		firstName:"zhang",
	}
	say:function(){
		return "I'm your father!";
	}
}

调用属性:  p97  动态存取没看懂，
	book.author.firstName；
	book['author']['firstName'];
	book.author['firstName'];
	
调用方法：
	book.say();
	book.say('a','b');
	book['say']();

对象创建：
	var book = {}
添加属性
	book.name = 'wo';
	book.say = function(){ return hero.name;};
	
删除属性：
	delete hero.name;
使用this:
	book.say = function(){ return this.name;};
构造函数：
	function Book(){
		this.author = 'yeye!'
	}
创建：
	var hero = new Hero();
	hero.author;
	
基本的构造器  - 类似于java
声明构造函数不用new就会返回undefine
	function Book(name){
		this.name = name;
		this.whoAreYou = function(){return this.name;}
	}
		
	因为用到了this所以会创建一个全局变量：this指的是全局
	当不用new时，直接调用构造就会在全局创建一个name谁都可以用了。
	用new的时候，this指的是当前的对象。
				   ^
				   |---	+
		========		|
		全局对象		|
		========
		
宿主环境--》浏览器   提供的全局对象就是一个对象的属性。
如：window 浏览器就是一个大的构造函数

构造器属性
	var h2 = new Hero("sfs");
	var h3 = new h2.constructor("sdf")  ==> 重新创建一个对象；
	var o = {} |Object()|  o.constructor 类型为funcation  内置创建对象

instanceof :  ==判断是否类型并返回true或者false;


创建对象的变形  == 返回对象的函数
	function factory(name){
		return{
			name:name;
		}
	}
	var o = factory('one');  
	one.name;  o.constructor;

	
一个例外  只有返回对象的时候会出现这种状况。
	function Fun(){
		this.a = 1;
		return{
			name:"wudalang";
		}
	}
	var fun = new Fun();
	fun.a 是undefine 
	fun.b  >>>   wudalang
	
传递对象： 和java中的引用指向同一对象是一样的，其中的一个变别的也跟着变

对象比较：当引用指向同一对象的时候才会返回true

调试工具：
	for(var i = 0;i<5;i++) {console.error(i);} console.log()  console.info();
	
================================================================

			内建对象
			
	